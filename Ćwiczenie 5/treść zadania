ĆWICZENIE 5: Producent-Konsument: Potoki Nazwane

Przy pomocy potoków nazwanych systemu UNIX zaimplementować problem "Producenta i Konsumenta” z ćwiczenia 4.

(a) Utworzyć potok FIFO z poziomu programu, a następnie uruchomić procesy Producenta i Konsumenta w tym samym programie (w procesie macierzystym i potomnym lub w dwóch potomnych). Potok usuwać w funkcji zarejestrowanej przez atexit.
(b) Sprawdzić, że potoki FIFO działają dla niezależnych procesów przez utworzenie potoku FIFO z linii komend oraz uruchomienie procesów Producenta i Konsumenta niezależnie z poziomu powłoki, np. w różnych terminalach — można użyć polecenia:
xterm -hold -title nazwa okna -e nazwa programu &
dla każdego z tych procesów w pliku Makefile (jak też tworzenie/usuwanie potoku).


- Implementacja problemu "Producent-konsument" jak w ćwiczeniu 4.
- Najlepiej zaimplementować "producenta" i "konsumenta" w dwóch oddzielnych programach (funkcjach main()) - każdy z nich niech przez argumenty wywołania pobiera nazwę potoku oraz nazwę odpowiedniego pliku tekstowego; potok nazwany - tak jak plik - przed użyciem należy otworzyć funkcją open(), a po użyciu zamknąć funkcją close().
- W punkcie (a) napisać dodatkowy program, który utworzy potok nazwany, następnie przy pomocy funkcji fork() utworzy dwa procesy potomne, w których przy użyciu wywołania exec uruchomi odpowiednio programy "producenta" i "konsumenta", a na końcu poczeka na ich zakończenie i usunie potok (nazwy plików wykonawczych dla exec przekazywać przez argumenty wywołania programu).
- Potok usuwać w funkcji zarejestrowanej przez funkcję atexit(). Zwrócić uwagę na to, gdzie należy wywołać funkcję exit(), a gdzie _exit() - by nie usuwać potoku, który nie został jeszcze utworzony lub nie usuwać go więcej niż raz! Dodatkowo, można dodać obsługę sygnału SIGINT, która będzie usuwać potok - na wypadek gdyby program trzeba było zakończyć sekwencją klawiszy Ctrl-C.
- Nazwy plików danych i wyników oraz nazwę potoku przekazywać przez argumenty wywołania programu.
- W punkcie (b) potok nazwany utworzyć z poziomu powłoki, następnie uruchomić programy "producenta" i "konsumenta" z różnych terminali, a na końcu z poziomu powłoki usunąć potok. Najlepiej wszystkie te polecenia umieścić w pliku Makefile, np. programy uruchomić za pomocą xterm:
xterm -hold -title PRODUCENT -e ./producent.x mojfifo dane.txt & xterm -hold -title KONSUMENT -e ./konsument.x mojfifo wyniki.txt
- Programy "producent" i "konsument" niech wypisują na ekranie komunikaty o przesyłanych danych, jak w ćwiczeniu 4; na końcu sprawdzić poprawność wykonania programów przez porównanie pliku danych "producenta" z plikiem wyników "konsumenta", np. przy pomocy polecenia diff -s
- UWAGA: Fukcją  write() wpisywać liczbę faktycznie wczytanych przez read()   bajtów (zwracaną prze nią).
- Programy kompilować/linkować z flagami: -Wall -std=c99 -pedantic